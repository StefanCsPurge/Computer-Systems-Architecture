     1                                  ;Write a program that reads a dword N, and N dword numbers.
     2                                  ;It will store the N numbers in an array. Then it will build a new string of bytes
     3                                  ;which contains the sum of even digits of each number from the first array.
     4                                  ;All dword numbers are in the interval [0,65535].
     5                                  ;Ex: N=4 -> 124,22,678,91 -> 6,4,14,0
     6                                  
     7                                  bits 32 ; assembling for the 32 bits architecture
     8                                  global start        
     9                                  
    10                                  extern exit,scanf,printf               
    11                                  import exit msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import printf msvcrt.dll
    14                                  
    15                                  segment data use32 class=data
    16 00000000 <res 00000004>              N resd 1
    17 00000004 4E3D00                      pf db "N=",0
    18 00000007 25642000                    pf2 db "%d ",0
    19 0000000B 256400                      sf db "%d",0
    20 0000000E <res 00000004>              b resd 1
    21 00000012 <res 000001A4>              r resb 420 ;here I'll store the resulting string
    22                                      
    23                                  
    24                                  segment code use32 class=code
    25                                      evenDigSum:
    26 00000000 8B442404                    mov EAX,[ESP+4] ;the number
    27 00000004 BB0A000000                  mov EBX,10
    28 00000009 B900000000                  mov ECX,0 ;sum
    29                                      
    30                                      divLoop:
    31 0000000E BA00000000                      mov EDX,0
    32                                          div 10 ; div 10
    32          ******************       error: invalid combination of opcode and operands
    33 00000013 F7C201000000                    test EDX,1 ;EDX has the digit, we test it's parity
    34 00000019 7502                            jnz nextDig
    35 0000001B 01D1                            add ECX,EDX
    36                                          nextDig:
    37 0000001D 83F800                          cmp EAX,0
    38 00000020 77EC                            ja divLoop
    39                                         
    40 00000022 89C8                        mov EAX,ECX
    41 00000024 C3                          ret
    42                                      
    43                                      start:
    44                                          ;printf(pf)
    45 00000025 68[04000000]                    push pf
    46 0000002A FF15[00000000]                  call [printf]
    47 00000030 83C404                          add ESP,4
    48                                          ;scanf(sf,N)
    49 00000033 68[00000000]                    push N
    50 00000038 68[0B000000]                    push sf
    51 0000003D FF15[00000000]                  call [scanf]
    52 00000043 83C408                          add ESP,4*2
    53                                          
    54 00000046 BF[12000000]                    mov EDI,r ;the resulting string of bytes
    55 0000004B 8B0D[00000000]                  mov ECX,[N]
    56 00000051 E34C                            JECXZ theEnd
    57 00000053 FC                              CLD
    58                                          
    59                                          .read:
    60 00000054 51                                  push ECX
    61 00000055 68[0E000000]                        push b
    62 0000005A 68[0B000000]                        push sf
    63 0000005F FF15[00000000]                      call [scanf]
    64 00000065 83C408                              add ESP,4*2
    65                                              
    66                                              ;evenDigSum(b)
    67 00000068 FF35[0E000000]                      push dword[b]
    68 0000006E E88DFFFFFF                          call evenDigSum
    69 00000073 83C404                              add ESP,4*1
    70 00000076 AA                                  STOSB
    71                                              
    72 00000077 59                                  pop ECX
    73 00000078 E2DA                            loop .read
    74                                          
    75 0000007A BE[12000000]                    mov ESI,r
    76 0000007F FC                              CLD
    77 00000080 8B0D[00000000]                  mov ECX,[N]
    78                                          
    79                                          .printR:
    80 00000086 AC                              LODSB
    81 00000087 0FB6C0                          movzx EAX,AL
    82 0000008A 51                              push ECX
    83 0000008B 50                              push EAX
    84 0000008C 68[07000000]                    push pf2
    85 00000091 FF15[00000000]                  call [printf]
    86 00000097 83C408                          add ESP,4*2
    87 0000009A 59                              pop ECX
    88 0000009B E2E9                            loop .printR
    89                                          
    90 0000009D EBFE                            jmp $
    91                                          theEnd:
    92                                          ; exit(0)
    93 0000009F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    94 000000A1 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
