     1                                  
     2                                  bits 32 ; assembling for the 32 bits architecture
     3                                  
     4                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     5                                  global longestSeq        
     6                                  
     7                                  
     8                                  ; our data is declared here (the variables needed by our program)
     9                                  segment data use32 class=data
    10                                      ; ...
    11                                  
    12                                  ; our code starts here
    13                                  segment code use32 class=code
    14                                      longestSeq:
    15 00000000 8B742408                    mov ESI,[ESP+8] ;offset of s
    16 00000004 8B4C2404                    mov ECX,[ESP+4] ;lenS
    17 00000008 C74424FC00000000            mov dword[ESP-4],0 ; local variable, max len
    18 00000010 BB00000000                  mov EBX,0 ;counter
    19 00000015 89F2                        mov EDX,ESI ;sequence start
    20 00000017 FC                          cld
    21                                          
    22                                      theFor:
    23 00000018 AC                              LODSB
    24 00000019 3C00                            cmp AL,0
    25 0000001B 7513                            jne count
    26                                          
    27 0000001D 3B5C24FC                        cmp EBX,[ESP-4]
    28 00000021 7E06                            jle noMax
    29 00000023 895C24FC                        mov [ESP-4],EBX
    30 00000027 89D7                            mov EDI,EDX
    31                                          
    32                                          noMax:
    33 00000029 BBFFFFFFFF                      mov EBX,-1
    34 0000002E 89F2                            mov EDX,ESI
    35                                          count:
    36 00000030 43                              inc EBX
    37 00000031 E2E5                        loop theFor
    38                                      
    39 00000033 89F8                        mov EAX,EDI
    40 00000035 C3                          ret
    41                                  
    42                                  ;%ifndef _B_ASM_
    43                                  ;%define _B_ASM_
    44                                  
    45                                  
    46                                      
    47                                  ;%endif
