     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  global r
     6                                  ; declare external functions needed by our program
     7                                  extern exit,printf,longestOddSeq             
     8                                  import exit msvcrt.dll    
     9                                  import printf msvcrt.dll
    10                                  ; our data is declared here (the variables needed by our program)
    11                                  segment data use32 class=data
    12 00000000 0C0D0207FD6405111B-         s db 12,13,10b,7,-3,100,101b,11h,27,-1,4
    12 00000009 FF04               
    13                                      lenS equ $-s
    14 0000000B 2558682000                  pFmt db "%Xh ",0
    15 00000010 <res 000000DE>              r resb 222
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20 00000000 68[00000000]                    push s ; given string
    21 00000005 6A0B                            push lenS ; its length
    22 00000007 E8(00000000)                    call longestOddSeq
    23 0000000C 83C408                          add ESP,4*2
    24                                          
    25 0000000F 89C1                            mov ECX,EAX ;the function returns in EAX the len of the r sequence
    26 00000011 E31C                            JECXZ theEnd
    27 00000013 BE[10000000]                    mov ESI,r
    28                                          
    29                                          .print:
    30 00000018 AC                              LODSB
    31 00000019 0FB6C0                          movzx EAX,AL
    32 0000001C 51                              push ECX
    33 0000001D 50                              push EAX
    34 0000001E 68[0B000000]                    push pFmt
    35 00000023 FF15[00000000]                  call [printf]
    36 00000029 83C408                          add ESP,4*2
    37 0000002C 59                              pop ECX
    38 0000002D E2E9                            loop .print
    39                                          
    40                                          theEnd:
    41                                          ; exit(0)
    42 0000002F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000031 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
